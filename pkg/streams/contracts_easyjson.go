// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ghevents

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson241b18dfDecodeGithubComMarefrGithubArchive(in *jlexer.Lexer, out *Repo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson241b18dfEncodeGithubComMarefrGithubArchive(out *jwriter.Writer, in Repo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Repo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson241b18dfEncodeGithubComMarefrGithubArchive(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Repo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson241b18dfEncodeGithubComMarefrGithubArchive(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Repo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson241b18dfDecodeGithubComMarefrGithubArchive(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Repo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson241b18dfDecodeGithubComMarefrGithubArchive(l, v)
}
func easyjson241b18dfDecodeGithubComMarefrGithubArchive1(in *jlexer.Lexer, out *Org) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "login":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson241b18dfEncodeGithubComMarefrGithubArchive1(out *jwriter.Writer, in Org) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Org) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson241b18dfEncodeGithubComMarefrGithubArchive1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Org) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson241b18dfEncodeGithubComMarefrGithubArchive1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Org) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson241b18dfDecodeGithubComMarefrGithubArchive1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Org) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson241b18dfDecodeGithubComMarefrGithubArchive1(l, v)
}
func easyjson241b18dfDecodeGithubComMarefrGithubArchive2(in *jlexer.Lexer, out *ExtractedEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Public":
			out.Public = bool(in.Bool())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "Actor":
			if in.IsNull() {
				in.Skip()
				out.Actor = nil
			} else {
				if out.Actor == nil {
					out.Actor = new(Actor)
				}
				(*out.Actor).UnmarshalEasyJSON(in)
			}
		case "Repo":
			if in.IsNull() {
				in.Skip()
				out.Repo = nil
			} else {
				if out.Repo == nil {
					out.Repo = new(Repo)
				}
				(*out.Repo).UnmarshalEasyJSON(in)
			}
		case "Org":
			if in.IsNull() {
				in.Skip()
				out.Org = nil
			} else {
				if out.Org == nil {
					out.Org = new(Org)
				}
				(*out.Org).UnmarshalEasyJSON(in)
			}
		case "FullEventPayload":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FullEventPayload).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson241b18dfEncodeGithubComMarefrGithubArchive2(out *jwriter.Writer, in ExtractedEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"Actor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Actor == nil {
			out.RawString("null")
		} else {
			(*in.Actor).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Repo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Repo == nil {
			out.RawString("null")
		} else {
			(*in.Repo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Org == nil {
			out.RawString("null")
		} else {
			(*in.Org).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"FullEventPayload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.FullEventPayload).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtractedEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson241b18dfEncodeGithubComMarefrGithubArchive2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtractedEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson241b18dfEncodeGithubComMarefrGithubArchive2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtractedEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson241b18dfDecodeGithubComMarefrGithubArchive2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtractedEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson241b18dfDecodeGithubComMarefrGithubArchive2(l, v)
}
func easyjson241b18dfDecodeGithubComMarefrGithubArchive3(in *jlexer.Lexer, out *EventBatch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "Name":
			out.Name = string(in.String())
		case "Events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]*ExtractedEvent, 0, 8)
					} else {
						out.Events = []*ExtractedEvent{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *ExtractedEvent
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(ExtractedEvent)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Events = append(out.Events, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson241b18dfEncodeGithubComMarefrGithubArchive3(out *jwriter.Writer, in EventBatch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Events {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventBatch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson241b18dfEncodeGithubComMarefrGithubArchive3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventBatch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson241b18dfEncodeGithubComMarefrGithubArchive3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventBatch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson241b18dfDecodeGithubComMarefrGithubArchive3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventBatch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson241b18dfDecodeGithubComMarefrGithubArchive3(l, v)
}
func easyjson241b18dfDecodeGithubComMarefrGithubArchive4(in *jlexer.Lexer, out *DecodedEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "actor":
			if in.IsNull() {
				in.Skip()
				out.Actor = nil
			} else {
				if out.Actor == nil {
					out.Actor = new(Actor)
				}
				(*out.Actor).UnmarshalEasyJSON(in)
			}
		case "repo":
			if in.IsNull() {
				in.Skip()
				out.Repo = nil
			} else {
				if out.Repo == nil {
					out.Repo = new(Repo)
				}
				(*out.Repo).UnmarshalEasyJSON(in)
			}
		case "org":
			if in.IsNull() {
				in.Skip()
				out.Org = nil
			} else {
				if out.Org == nil {
					out.Org = new(Org)
				}
				(*out.Org).UnmarshalEasyJSON(in)
			}
		case "payload":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Payload).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson241b18dfEncodeGithubComMarefrGithubArchive4(out *jwriter.Writer, in DecodedEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"public\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"actor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Actor == nil {
			out.RawString("null")
		} else {
			(*in.Actor).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"repo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Repo == nil {
			out.RawString("null")
		} else {
			(*in.Repo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Org == nil {
			out.RawString("null")
		} else {
			(*in.Org).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Payload).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DecodedEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson241b18dfEncodeGithubComMarefrGithubArchive4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DecodedEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson241b18dfEncodeGithubComMarefrGithubArchive4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DecodedEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson241b18dfDecodeGithubComMarefrGithubArchive4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DecodedEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson241b18dfDecodeGithubComMarefrGithubArchive4(l, v)
}
func easyjson241b18dfDecodeGithubComMarefrGithubArchive5(in *jlexer.Lexer, out *Actor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "login":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson241b18dfEncodeGithubComMarefrGithubArchive5(out *jwriter.Writer, in Actor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Actor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson241b18dfEncodeGithubComMarefrGithubArchive5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Actor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson241b18dfEncodeGithubComMarefrGithubArchive5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Actor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson241b18dfDecodeGithubComMarefrGithubArchive5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Actor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson241b18dfDecodeGithubComMarefrGithubArchive5(l, v)
}
